
AVRASM ver. 2.1.30  C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm Sat Jul 08 11:53:41 2023

C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1082): warning: Register r5 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1083): warning: Register r4 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1084): warning: Register r7 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1085): warning: Register r6 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1086): warning: Register r8 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1087): warning: Register r9 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1088): warning: Register r11 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1089): warning: Register r10 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1090): warning: Register r13 already defined by the .DEF directive
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1091): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _currentvalue=R5
                 	.DEF _bpm=R4
                 	.DEF _timetosample=R7
                 	.DEF _samplenumber=R6
                 	.DEF _maxsample=R8
                 	.DEF _maxsample_msb=R9
                 	.DEF _maxindex=R11
                 	.DEF __lcd_x=R10
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0047 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G105:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G105:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 5042
000034 3a4d
000035 0020      	.DB  0x42,0x50,0x4D,0x3A,0x20,0x0
                 _0x2000003:
000036 c080      	.DB  0x80,0xC0
                 _0x2040060:
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1133): warning: .cseg .db misalignment - padding zero byte
000037 0001      	.DB  0x1
                 _0x2040000:
000038 4e2d
000039 4e41
00003a 4900
00003b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Hendy Group\Desktop\t_gp_ox\Oximeter_HR_ATmega32a_Code_Vision_project\Debug\List\trial.asm(1136): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003d 0006      	.DW  0x06
00003e 0260      	.DW  _0x26
00003f 0066      	.DW  _0x0*2
                 
000040 0002      	.DW  0x02
000041 0426      	.DW  __base_y_G100
000042 006c      	.DW  _0x2000003*2
                 
000043 0001      	.DW  0x01
000044 042a      	.DW  __seed_G102
000045 006e      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000046 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000047 94f8      	CLI
000048 27ee      	CLR  R30
000049 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004a e0f1      	LDI  R31,1
00004b bff5      	OUT  MCUCR,R31
00004c bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004d e08d      	LDI  R24,(14-2)+1
00004e e0a2      	LDI  R26,2
00004f 27bb      	CLR  R27
                 __CLEAR_REG:
000050 93ed      	ST   X+,R30
000051 958a      	DEC  R24
000052 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000053 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000054 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000055 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000056 93ed      	ST   X+,R30
000057 9701      	SBIW R24,1
000058 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000059 e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005b 9185      	LPM  R24,Z+
00005c 9195      	LPM  R25,Z+
00005d 9700      	SBIW R24,0
00005e f061      	BREQ __GLOBAL_INI_END
00005f 91a5      	LPM  R26,Z+
000060 91b5      	LPM  R27,Z+
000061 9005      	LPM  R0,Z+
000062 9015      	LPM  R1,Z+
000063 01bf      	MOVW R22,R30
000064 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000065 9005      	LPM  R0,Z+
000066 920d      	ST   X+,R0
000067 9701      	SBIW R24,1
000068 f7e1      	BRNE __GLOBAL_INI_LOOP
000069 01fb      	MOVW R30,R22
00006a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006c bfed      	OUT  SPL,R30
00006d e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000070 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000071 940c 020b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;	flags -> R17
                 ;int Sinewave[N_WAVE]; // a table of sines for the FFT
                 ;unsigned char currentvalue;
                 ;unsigned char bpm;
                 ;unsigned char timetosample;
                 ;unsigned char samplenumber;
                 ;char heartsamples[N_WAVE];
                 ;int zeros[N_WAVE];
                 ;int heartsamplescopy[N_WAVE];
                 ;int maxsample;
                 ;unsigned char maxindex;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 002D {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 002E ADMUX = adc_input | ADC_VREF_TYPE;
000073 931a      	ST   -Y,R17
000074 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
000075 2fe1      	MOV  R30,R17
000076 64e0      	ORI  R30,0x40
000077 b9e7      	OUT  0x7,R30
                 ; 0000 002F // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0030 delay_us(10);
                +
000078 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000079 958a     +DEC R24
00007a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0031 // Start the AD conversion
                 ; 0000 0032 ADCSRA |= (1 << ADSC);
00007b 9a36      	SBI  0x6,6
                 ; 0000 0033 // Wait for the AD conversion to complete
                 ; 0000 0034 while ((ADCSRA & (1 << ADIF)) == 0);
                 _0x4:
00007c 9b34      	SBIS 0x6,4
00007d cffe      	RJMP _0x4
                 ; 0000 0035 ADCSRA |= (1 << ADIF);
00007e 9a34      	SBI  0x6,4
                 ; 0000 0036 return ADCW;
00007f b1e4      	IN   R30,0x4
000080 b1f5      	IN   R31,0x4+1
000081 940c 0333 	JMP  _0x20E0002
                 ; 0000 0037 }
                 ; .FEND
                 ;void initialize()
                 ; 0000 0039 {   char i;
                 _initialize:
                 ; .FSTART _initialize
                 ; 0000 003A // Alphanumeric LCD initialization
                 ; 0000 003B // Connections are specified in the
                 ; 0000 003C // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 003D // RS - PORTB Bit 0
                 ; 0000 003E // RD - PORTB Bit 1
                 ; 0000 003F // EN - PORTB Bit 2
                 ; 0000 0040 // D4 - PORTD Bit 6
                 ; 0000 0041 // D5 - PORTD Bit 5
                 ; 0000 0042 // D6 - PORTD Bit 4
                 ; 0000 0043 // D7 - PORTD Bit 3
                 ; 0000 0044 // Characters/line: 16
                 ; 0000 0045 
                 ; 0000 0046 // Initialize LCD display
                 ; 0000 0047 lcd_init(16);
000083 931a      	ST   -Y,R17
                 ;	i -> R17
000084 e1a0      	LDI  R26,LOW(16)
000085 940e 0305 	CALL _lcd_init
                 ; 0000 0048 
                 ; 0000 0049 
                 ; 0000 004A // ADC initialization
                 ; 0000 004B // ADC Clock frequency: 125.000 kHz
                 ; 0000 004C // ADC Voltage Reference: AVCC pin
                 ; 0000 004D // ADC Auto Trigger Source: Free Running
                 ; 0000 004E ADMUX = ADC_VREF_TYPE;
000087 e4e0      	LDI  R30,LOW(64)
000088 b9e7      	OUT  0x7,R30
                 ; 0000 004F ADCSRA = (1 << ADEN) | (0 << ADSC) | (1 << ADATE) | (0 << ADIF) | (0 << ADIE) |  ...
000089 eae6      	LDI  R30,LOW(166)
00008a b9e6      	OUT  0x6,R30
                 ; 0000 0050 SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
00008b e0e0      	LDI  R30,LOW(0)
00008c bfe0      	OUT  0x30,R30
                 ; 0000 0051 
                 ; 0000 0052 // Initialize variables
                 ; 0000 0053 timetosample = 0;
00008d 2477      	CLR  R7
                 ; 0000 0054 samplenumber = 0;
00008e 2466      	CLR  R6
                 ; 0000 0055 maxsample = 0;
00008f 2488      	CLR  R8
000090 2499      	CLR  R9
                 ; 0000 0056 maxindex = 0;
000091 24bb      	CLR  R11
                 ; 0000 0057 currentvalue = 0;
000092 2455      	CLR  R5
                 ; 0000 0058 
                 ; 0000 0059 // Generate one cycle sine table required for FFT
                 ; 0000 005A for ( i = 0; i < N_WAVE; i++)
000093 e010      	LDI  R17,LOW(0)
                 _0x8:
000094 3410      	CPI  R17,64
000095 f570      	BRSH _0x9
                 ; 0000 005B Sinewave[i] = float2fix(sin(6.283 * ((float)i) / N_WAVE));
000096 2fe1      	MOV  R30,R17
000097 e6a6      	LDI  R26,LOW(_Sinewave)
000098 e0b2      	LDI  R27,HIGH(_Sinewave)
000099 e0f0      	LDI  R31,0
00009a 940e 0409 	CALL SUBOPT_0x0
00009c 93ff      	PUSH R31
00009d 93ef      	PUSH R30
00009e 2fe1      	MOV  R30,R17
00009f 27ff      	CLR  R31
0000a0 2766      	CLR  R22
0000a1 2777      	CLR  R23
0000a2 940e 0570 	CALL __CDF1
                +
0000a4 e5a6     +LDI R26 , LOW ( 0x40C90E56 )
0000a5 e0be     +LDI R27 , HIGH ( 0x40C90E56 )
0000a6 ec89     +LDI R24 , BYTE3 ( 0x40C90E56 )
0000a7 e490     +LDI R25 , BYTE4 ( 0x40C90E56 )
                 	__GETD2N 0x40C90E56
0000a8 940e 05f9 	CALL __MULF12
0000aa 01df      	MOVW R26,R30
0000ab 01cb      	MOVW R24,R22
                +
0000ac e0e0     +LDI R30 , LOW ( 0x42800000 )
0000ad e0f0     +LDI R31 , HIGH ( 0x42800000 )
0000ae e860     +LDI R22 , BYTE3 ( 0x42800000 )
0000af e472     +LDI R23 , BYTE4 ( 0x42800000 )
                 	__GETD1N 0x42800000
0000b0 940e 0647 	CALL __DIVF21
0000b2 01df      	MOVW R26,R30
0000b3 01cb      	MOVW R24,R22
0000b4 940e 037d 	CALL _sin
                +
0000b6 e0a0     +LDI R26 , LOW ( 0x43800000 )
0000b7 e0b0     +LDI R27 , HIGH ( 0x43800000 )
0000b8 e880     +LDI R24 , BYTE3 ( 0x43800000 )
0000b9 e493     +LDI R25 , BYTE4 ( 0x43800000 )
                 	__GETD2N 0x43800000
0000ba 940e 05f9 	CALL __MULF12
0000bc 940e 0539 	CALL __CFD1
0000be 91af      	POP  R26
0000bf 91bf      	POP  R27
0000c0 93ed      	ST   X+,R30
0000c1 93fc      	ST   X,R31
0000c2 5f1f      	SUBI R17,-1
0000c3 cfd0      	RJMP _0x8
                 _0x9:
                 ; 0000 005C }
0000c4 940c 0333 	JMP  _0x20E0002
                 ; .FEND
                 ;void FFTfix(int fr[], int fi[], int m)
                 ; 0000 005E {
                 _FFTfix:
                 ; .FSTART _FFTfix
                 ; 0000 005F int mr, nn, i, j, L, k, istep, n;
                 ; 0000 0060 int qr, qi, tr, ti, wr, wi;
                 ; 0000 0061 
                 ; 0000 0062 mr = 0;
0000c6 93ba      	ST   -Y,R27
0000c7 93aa      	ST   -Y,R26
0000c8 9766      	SBIW R28,22
0000c9 940e 0468 	CALL __SAVELOCR6
                 ;	fr -> Y+32
                 ;	fi -> Y+30
                 ;	m -> Y+28
                 ;	mr -> R16,R17
                 ;	nn -> R18,R19
                 ;	i -> R20,R21
                 ;	j -> Y+26
                 ;	L -> Y+24
                 ;	k -> Y+22
                 ;	istep -> Y+20
                 ;	n -> Y+18
                 ;	qr -> Y+16
                 ;	qi -> Y+14
                 ;	tr -> Y+12
                 ;	ti -> Y+10
                 ;	wr -> Y+8
                 ;	wi -> Y+6
                +
0000cb e000     +LDI R16 , LOW ( 0 )
0000cc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0063 n = 1 << m; // number of points
0000cd 8dec      	LDD  R30,Y+28
0000ce e0a1      	LDI  R26,LOW(1)
0000cf e0b0      	LDI  R27,HIGH(1)
0000d0 940e 0482 	CALL __LSLW12
0000d2 8bea      	STD  Y+18,R30
0000d3 8bfb      	STD  Y+18+1,R31
                 ; 0000 0064 nn = n - 1;
0000d4 9731      	SBIW R30,1
0000d5 019f      	MOVW R18,R30
                 ; 0000 0065 
                 ; 0000 0066 // Decimation in time - reorder data
                 ; 0000 0067 for (m = 1; m <= nn; ++m)
0000d6 e0e1      	LDI  R30,LOW(1)
0000d7 e0f0      	LDI  R31,HIGH(1)
0000d8 8fec      	STD  Y+28,R30
0000d9 8ffd      	STD  Y+28+1,R31
                 _0xB:
0000da 8dac      	LDD  R26,Y+28
0000db 8dbd      	LDD  R27,Y+28+1
0000dc 172a      	CP   R18,R26
0000dd 073b      	CPC  R19,R27
0000de f40c      	BRGE PC+2
0000df c052      	RJMP _0xC
                 ; 0000 0068 {
                 ; 0000 0069 L = n;
0000e0 89ea      	LDD  R30,Y+18
0000e1 89fb      	LDD  R31,Y+18+1
0000e2 8fe8      	STD  Y+24,R30
0000e3 8ff9      	STD  Y+24+1,R31
                 ; 0000 006A do
                 _0xE:
                 ; 0000 006B L >>= 1;
0000e4 8de8      	LDD  R30,Y+24
0000e5 8df9      	LDD  R31,Y+24+1
0000e6 95f5      	ASR  R31
0000e7 95e7      	ROR  R30
0000e8 8fe8      	STD  Y+24,R30
0000e9 8ff9      	STD  Y+24+1,R31
                 ; 0000 006C while (mr + L > nn);
0000ea 8da8      	LDD  R26,Y+24
0000eb 8db9      	LDD  R27,Y+24+1
0000ec 0fa0      	ADD  R26,R16
0000ed 1fb1      	ADC  R27,R17
0000ee 172a      	CP   R18,R26
0000ef 073b      	CPC  R19,R27
0000f0 f39c      	BRLT _0xE
                 ; 0000 006D mr = (mr & (L - 1)) + L;
0000f1 9731      	SBIW R30,1
0000f2 23e0      	AND  R30,R16
0000f3 23f1      	AND  R31,R17
0000f4 8da8      	LDD  R26,Y+24
0000f5 8db9      	LDD  R27,Y+24+1
0000f6 0fea      	ADD  R30,R26
0000f7 1ffb      	ADC  R31,R27
0000f8 018f      	MOVW R16,R30
                 ; 0000 006E if (mr <= m)
0000f9 8dec      	LDD  R30,Y+28
0000fa 8dfd      	LDD  R31,Y+28+1
0000fb 17e0      	CP   R30,R16
0000fc 07f1      	CPC  R31,R17
0000fd f574      	BRGE _0xA
                 ; 0000 006F continue;
                 ; 0000 0070 tr = fr[m];
0000fe 940e 040e 	CALL SUBOPT_0x1
000100 87ec      	STD  Y+12,R30
000101 87fd      	STD  Y+12+1,R31
                 ; 0000 0071 fr[m] = fr[mr];
000102 8dec      	LDD  R30,Y+28
000103 8dfd      	LDD  R31,Y+28+1
000104 940e 0417 	CALL SUBOPT_0x2
000106 010f      	MOVW R0,R30
000107 01f8      	MOVW R30,R16
000108 940e 040e 	CALL SUBOPT_0x1
00010a 01d0      	MOVW R26,R0
00010b 93ed      	ST   X+,R30
00010c 93fc      	ST   X,R31
                 ; 0000 0072 fr[mr] = tr;
00010d 01f8      	MOVW R30,R16
00010e 940e 0417 	CALL SUBOPT_0x2
000110 85ac      	LDD  R26,Y+12
000111 85bd      	LDD  R27,Y+12+1
000112 83a0      	STD  Z+0,R26
000113 83b1      	STD  Z+1,R27
                 ; 0000 0073 ti = fi[m];
000114 8dec      	LDD  R30,Y+28
000115 8dfd      	LDD  R31,Y+28+1
000116 940e 041a 	CALL SUBOPT_0x3
000118 87ea      	STD  Y+10,R30
000119 87fb      	STD  Y+10+1,R31
                 ; 0000 0074 fi[m] = fi[mr];
00011a 8dec      	LDD  R30,Y+28
00011b 8dfd      	LDD  R31,Y+28+1
00011c 940e 0423 	CALL SUBOPT_0x4
00011e 010f      	MOVW R0,R30
00011f 01f8      	MOVW R30,R16
000120 940e 041a 	CALL SUBOPT_0x3
000122 01d0      	MOVW R26,R0
000123 93ed      	ST   X+,R30
000124 93fc      	ST   X,R31
                 ; 0000 0075 fi[mr] = ti;
000125 01f8      	MOVW R30,R16
000126 940e 0423 	CALL SUBOPT_0x4
000128 85aa      	LDD  R26,Y+10
000129 85bb      	LDD  R27,Y+10+1
00012a 83a0      	STD  Z+0,R26
00012b 83b1      	STD  Z+1,R27
                 ; 0000 0076 }
                 _0xA:
00012c 8dec      	LDD  R30,Y+28
00012d 8dfd      	LDD  R31,Y+28+1
00012e 9631      	ADIW R30,1
00012f 8fec      	STD  Y+28,R30
000130 8ffd      	STD  Y+28+1,R31
000131 cfa8      	RJMP _0xB
                 _0xC:
                 ; 0000 0077 
                 ; 0000 0078 L = 1;
000132 e0e1      	LDI  R30,LOW(1)
000133 e0f0      	LDI  R31,HIGH(1)
000134 8fe8      	STD  Y+24,R30
000135 8ff9      	STD  Y+24+1,R31
                 ; 0000 0079 k = LOG2_N_WAVE - 1;
000136 e0e5      	LDI  R30,LOW(5)
000137 e0f0      	LDI  R31,HIGH(5)
000138 8bee      	STD  Y+22,R30
000139 8bff      	STD  Y+22+1,R31
                 ; 0000 007A while (L < n)
                 _0x11:
00013a 89ea      	LDD  R30,Y+18
00013b 89fb      	LDD  R31,Y+18+1
00013c 8da8      	LDD  R26,Y+24
00013d 8db9      	LDD  R27,Y+24+1
00013e 17ae      	CP   R26,R30
00013f 07bf      	CPC  R27,R31
000140 f00c      	BRLT PC+2
000141 c0c5      	RJMP _0x13
                 ; 0000 007B {
                 ; 0000 007C istep = L << 1;
000142 8de8      	LDD  R30,Y+24
000143 8df9      	LDD  R31,Y+24+1
000144 0fee      	LSL  R30
000145 1fff      	ROL  R31
000146 8bec      	STD  Y+20,R30
000147 8bfd      	STD  Y+20+1,R31
                 ; 0000 007D for (m = 0; m < L; ++m)
000148 e0e0      	LDI  R30,LOW(0)
000149 8fec      	STD  Y+28,R30
00014a 8fed      	STD  Y+28+1,R30
                 _0x15:
00014b 8de8      	LDD  R30,Y+24
00014c 8df9      	LDD  R31,Y+24+1
00014d 8dac      	LDD  R26,Y+28
00014e 8dbd      	LDD  R27,Y+28+1
00014f 17ae      	CP   R26,R30
000150 07bf      	CPC  R27,R31
000151 f00c      	BRLT PC+2
000152 c0aa      	RJMP _0x16
                 ; 0000 007E {
                 ; 0000 007F j = m << k;
000153 89ee      	LDD  R30,Y+22
000154 940e 0482 	CALL __LSLW12
000156 8fea      	STD  Y+26,R30
000157 8ffb      	STD  Y+26+1,R31
                 ; 0000 0080 wr = Sinewave[j + N_WAVE / 4];
000158 8daa      	LDD  R26,Y+26
000159 8dbb      	LDD  R27,Y+26+1
00015a 0faa      	LSL  R26
00015b 1fbb      	ROL  R27
                +
00015c 57aa     +SUBI R26 , LOW ( - _Sinewave - ( 32 ) )
00015d 4fbd     +SBCI R27 , HIGH ( - _Sinewave - ( 32 ) )
                 	__ADDW2MN _Sinewave,32
00015e 91ed      	LD   R30,X+
00015f 91fd      	LD   R31,X+
000160 87e8      	STD  Y+8,R30
000161 87f9      	STD  Y+8+1,R31
                 ; 0000 0081 wi = -Sinewave[j];
000162 8dea      	LDD  R30,Y+26
000163 8dfb      	LDD  R31,Y+26+1
000164 e6a6      	LDI  R26,LOW(_Sinewave)
000165 e0b2      	LDI  R27,HIGH(_Sinewave)
000166 940e 0426 	CALL SUBOPT_0x5
000168 940e 04df 	CALL __GETW1P
00016a 940e 0476 	CALL __ANEGW1
00016c 83ee      	STD  Y+6,R30
00016d 83ff      	STD  Y+6+1,R31
                 ; 0000 0082 wr >>= 1;
00016e 85e8      	LDD  R30,Y+8
00016f 85f9      	LDD  R31,Y+8+1
000170 95f5      	ASR  R31
000171 95e7      	ROR  R30
000172 87e8      	STD  Y+8,R30
000173 87f9      	STD  Y+8+1,R31
                 ; 0000 0083 wi >>= 1;
000174 81ee      	LDD  R30,Y+6
000175 81ff      	LDD  R31,Y+6+1
000176 95f5      	ASR  R31
000177 95e7      	ROR  R30
000178 83ee      	STD  Y+6,R30
000179 83ff      	STD  Y+6+1,R31
                 ; 0000 0084 
                 ; 0000 0085 for (i = m; i < n; i += istep)
                +
00017a 8d4c     +LDD R20 , Y + 28
00017b 8d5d     +LDD R21 , Y + 28 + 1
                 	__GETWRS 20,21,28
                 _0x18:
00017c 89ea      	LDD  R30,Y+18
00017d 89fb      	LDD  R31,Y+18+1
00017e 174e      	CP   R20,R30
00017f 075f      	CPC  R21,R31
000180 f00c      	BRLT PC+2
000181 c075      	RJMP _0x19
                 ; 0000 0086 {
                 ; 0000 0087 j = i + L;
000182 8de8      	LDD  R30,Y+24
000183 8df9      	LDD  R31,Y+24+1
000184 0fe4      	ADD  R30,R20
000185 1ff5      	ADC  R31,R21
000186 8fea      	STD  Y+26,R30
000187 8ffb      	STD  Y+26+1,R31
                 ; 0000 0088 tr = (wr * fr[j] - wi * fi[j]) >> 8;
000188 940e 040e 	CALL SUBOPT_0x1
00018a 940e 042b 	CALL SUBOPT_0x6
00018c 940e 041a 	CALL SUBOPT_0x3
00018e 81ae      	LDD  R26,Y+6
00018f 81bf      	LDD  R27,Y+6+1
000190 940e 04a6 	CALL __MULW12
000192 01db      	MOVW R26,R22
000193 1bae      	SUB  R26,R30
000194 0bbf      	SBC  R27,R31
000195 01fd      	MOVW R30,R26
000196 940e 0493 	CALL __ASRW8
000198 87ec      	STD  Y+12,R30
000199 87fd      	STD  Y+12+1,R31
                 ; 0000 0089 ti = (wr * fi[j] + wi * fr[j]) >> 8;
00019a 8dea      	LDD  R30,Y+26
00019b 8dfb      	LDD  R31,Y+26+1
00019c 940e 041a 	CALL SUBOPT_0x3
00019e 940e 042b 	CALL SUBOPT_0x6
0001a0 940e 040e 	CALL SUBOPT_0x1
0001a2 81ae      	LDD  R26,Y+6
0001a3 81bf      	LDD  R27,Y+6+1
0001a4 940e 04a6 	CALL __MULW12
0001a6 01db      	MOVW R26,R22
0001a7 0fae      	ADD  R26,R30
0001a8 1fbf      	ADC  R27,R31
0001a9 01fd      	MOVW R30,R26
0001aa 940e 0493 	CALL __ASRW8
0001ac 87ea      	STD  Y+10,R30
0001ad 87fb      	STD  Y+10+1,R31
                 ; 0000 008A qr = fr[i] >> 1;
0001ae 01fa      	MOVW R30,R20
0001af 940e 040e 	CALL SUBOPT_0x1
0001b1 95f5      	ASR  R31
0001b2 95e7      	ROR  R30
0001b3 8be8      	STD  Y+16,R30
0001b4 8bf9      	STD  Y+16+1,R31
                 ; 0000 008B qi = fi[i] >> 1;
0001b5 01fa      	MOVW R30,R20
0001b6 940e 041a 	CALL SUBOPT_0x3
0001b8 95f5      	ASR  R31
0001b9 95e7      	ROR  R30
0001ba 87ee      	STD  Y+14,R30
0001bb 87ff      	STD  Y+14+1,R31
                 ; 0000 008C fr[j] = qr - tr;
0001bc 8dea      	LDD  R30,Y+26
0001bd 8dfb      	LDD  R31,Y+26+1
0001be 940e 0417 	CALL SUBOPT_0x2
0001c0 010f      	MOVW R0,R30
0001c1 85ac      	LDD  R26,Y+12
0001c2 85bd      	LDD  R27,Y+12+1
0001c3 89e8      	LDD  R30,Y+16
0001c4 89f9      	LDD  R31,Y+16+1
0001c5 1bea      	SUB  R30,R26
0001c6 0bfb      	SBC  R31,R27
0001c7 01d0      	MOVW R26,R0
0001c8 93ed      	ST   X+,R30
0001c9 93fc      	ST   X,R31
                 ; 0000 008D fi[j] = qi - ti;
0001ca 8dea      	LDD  R30,Y+26
0001cb 8dfb      	LDD  R31,Y+26+1
0001cc 940e 0423 	CALL SUBOPT_0x4
0001ce 010f      	MOVW R0,R30
0001cf 85aa      	LDD  R26,Y+10
0001d0 85bb      	LDD  R27,Y+10+1
0001d1 85ee      	LDD  R30,Y+14
0001d2 85ff      	LDD  R31,Y+14+1
0001d3 1bea      	SUB  R30,R26
0001d4 0bfb      	SBC  R31,R27
0001d5 01d0      	MOVW R26,R0
0001d6 93ed      	ST   X+,R30
0001d7 93fc      	ST   X,R31
                 ; 0000 008E fr[i] = qr + tr;
0001d8 01fa      	MOVW R30,R20
0001d9 940e 0417 	CALL SUBOPT_0x2
0001db 010f      	MOVW R0,R30
0001dc 85ec      	LDD  R30,Y+12
0001dd 85fd      	LDD  R31,Y+12+1
0001de 89a8      	LDD  R26,Y+16
0001df 89b9      	LDD  R27,Y+16+1
0001e0 0fea      	ADD  R30,R26
0001e1 1ffb      	ADC  R31,R27
0001e2 01d0      	MOVW R26,R0
0001e3 93ed      	ST   X+,R30
0001e4 93fc      	ST   X,R31
                 ; 0000 008F fi[i] = qi + ti;
0001e5 01fa      	MOVW R30,R20
0001e6 940e 0423 	CALL SUBOPT_0x4
0001e8 010f      	MOVW R0,R30
0001e9 85ea      	LDD  R30,Y+10
0001ea 85fb      	LDD  R31,Y+10+1
0001eb 85ae      	LDD  R26,Y+14
0001ec 85bf      	LDD  R27,Y+14+1
0001ed 0fea      	ADD  R30,R26
0001ee 1ffb      	ADC  R31,R27
0001ef 01d0      	MOVW R26,R0
0001f0 93ed      	ST   X+,R30
0001f1 93fc      	ST   X,R31
                 ; 0000 0090 }
0001f2 89ec      	LDD  R30,Y+20
0001f3 89fd      	LDD  R31,Y+20+1
                +
0001f4 0f4e     +ADD R20 , R30
0001f5 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
0001f6 cf85      	RJMP _0x18
                 _0x19:
                 ; 0000 0091 }
0001f7 8dec      	LDD  R30,Y+28
0001f8 8dfd      	LDD  R31,Y+28+1
0001f9 9631      	ADIW R30,1
0001fa 8fec      	STD  Y+28,R30
0001fb 8ffd      	STD  Y+28+1,R31
0001fc cf4e      	RJMP _0x15
                 _0x16:
                 ; 0000 0092 --k;
0001fd 89ee      	LDD  R30,Y+22
0001fe 89ff      	LDD  R31,Y+22+1
0001ff 9731      	SBIW R30,1
000200 8bee      	STD  Y+22,R30
000201 8bff      	STD  Y+22+1,R31
                 ; 0000 0093 L = istep;
000202 89ec      	LDD  R30,Y+20
000203 89fd      	LDD  R31,Y+20+1
000204 8fe8      	STD  Y+24,R30
000205 8ff9      	STD  Y+24+1,R31
                 ; 0000 0094 }
000206 cf33      	RJMP _0x11
                 _0x13:
                 ; 0000 0095 }
000207 940e 046f 	CALL __LOADLOCR6
000209 96a2      	ADIW R28,34
00020a 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 0098 {   char i;
                 _main:
                 ; .FSTART _main
                 ; 0000 0099 char temp=0;
                 ; 0000 009A // Initialize variables and peripherals
                 ; 0000 009B initialize();
                 ;	i -> R17
                 ;	temp -> R16
00020b e000      	LDI  R16,0
00020c de76      	RCALL _initialize
                 ; 0000 009C 
                 ; 0000 009D while (1)
                 _0x1A:
                 ; 0000 009E {
                 ; 0000 009F 
                 ; 0000 00A0 
                 ; 0000 00A1 // Read the ADC value
                 ; 0000 00A2 currentvalue = read_adc(0);
00020d e0a0      	LDI  R26,LOW(0)
00020e de64      	RCALL _read_adc
00020f 2e5e      	MOV  R5,R30
                 ; 0000 00A3 // Store the value in the heart samples array
                 ; 0000 00A4 heartsamples[samplenumber] = currentvalue;
000210 2de6      	MOV  R30,R6
000211 e0f0      	LDI  R31,0
000212 51ea      	SUBI R30,LOW(-_heartsamples)
000213 4ffd      	SBCI R31,HIGH(-_heartsamples)
000214 8250      	ST   Z,R5
                 ; 0000 00A5 samplenumber++;
000215 9463      	INC  R6
                 ; 0000 00A6 
                 ; 0000 00A7 if (samplenumber >= N_WAVE)
000216 e4e0      	LDI  R30,LOW(64)
000217 166e      	CP   R6,R30
000218 f408      	BRSH PC+2
000219 c073      	RJMP _0x1D
                 ; 0000 00A8 {
                 ; 0000 00A9 // Perform FFT on the heart samples
                 ; 0000 00AA for ( i = 0; i < N_WAVE; i++)
00021a e010      	LDI  R17,LOW(0)
                 _0x1F:
00021b 3410      	CPI  R17,64
00021c f490      	BRSH _0x20
                 ; 0000 00AB {
                 ; 0000 00AC zeros[i] = 0;
00021d 940e 0433 	CALL SUBOPT_0x7
00021f e0e0      	LDI  R30,LOW(0)
000220 e0f0      	LDI  R31,HIGH(0)
000221 93ed      	ST   X+,R30
000222 93fc      	ST   X,R31
                 ; 0000 00AD heartsamplescopy[i] = int2fix(heartsamples[i]);
000223 940e 0438 	CALL SUBOPT_0x8
000225 2fe1      	MOV  R30,R17
000226 e0f0      	LDI  R31,0
000227 51ea      	SUBI R30,LOW(-_heartsamples)
000228 4ffd      	SBCI R31,HIGH(-_heartsamples)
000229 81f0      	LD   R31,Z
00022a e0e0      	LDI  R30,LOW(0)
00022b 93ed      	ST   X+,R30
00022c 93fc      	ST   X,R31
                 ; 0000 00AE }
00022d 5f1f      	SUBI R17,-1
00022e cfec      	RJMP _0x1F
                 _0x20:
                 ; 0000 00AF FFTfix(heartsamplescopy, zeros, LOG2_N_WAVE);
00022f eae6      	LDI  R30,LOW(_heartsamplescopy)
000230 e0f3      	LDI  R31,HIGH(_heartsamplescopy)
000231 93fa      	ST   -Y,R31
000232 93ea      	ST   -Y,R30
000233 e2e6      	LDI  R30,LOW(_zeros)
000234 e0f3      	LDI  R31,HIGH(_zeros)
000235 93fa      	ST   -Y,R31
000236 93ea      	ST   -Y,R30
000237 e0a6      	LDI  R26,LOW(6)
000238 e0b0      	LDI  R27,0
000239 de8c      	RCALL _FFTfix
                 ; 0000 00B0 
                 ; 0000 00B1 // Find the maximum magnitude and its index
                 ; 0000 00B2 maxsample = 0;
00023a 2488      	CLR  R8
00023b 2499      	CLR  R9
                 ; 0000 00B3 maxindex = 0;
00023c 24bb      	CLR  R11
                 ; 0000 00B4 for ( i = 0; i < N_WAVE / 2; i++)
00023d e010      	LDI  R17,LOW(0)
                 _0x22:
00023e 3210      	CPI  R17,32
00023f f538      	BRSH _0x23
                 ; 0000 00B5 {
                 ; 0000 00B6 int magnitude = heartsamplescopy[i] * heartsamplescopy[i] + zeros[i] * zeros[i];
                 ; 0000 00B7 if (magnitude > maxsample)
000240 9722      	SBIW R28,2
                 ;	magnitude -> Y+0
000241 940e 0438 	CALL SUBOPT_0x8
000243 900d      	LD   R0,X+
000244 901c      	LD   R1,X
000245 940e 0438 	CALL SUBOPT_0x8
000247 91ed      	LD   R30,X+
000248 91fd      	LD   R31,X+
000249 01d0      	MOVW R26,R0
00024a 940e 04a6 	CALL __MULW12
00024c 01bf      	MOVW R22,R30
00024d 940e 0433 	CALL SUBOPT_0x7
00024f 900d      	LD   R0,X+
000250 901c      	LD   R1,X
000251 940e 0433 	CALL SUBOPT_0x7
000253 91ed      	LD   R30,X+
000254 91fd      	LD   R31,X+
000255 01d0      	MOVW R26,R0
000256 940e 04a6 	CALL __MULW12
000258 0fe6      	ADD  R30,R22
000259 1ff7      	ADC  R31,R23
00025a 83e8      	ST   Y,R30
00025b 83f9      	STD  Y+1,R31
00025c 81a8      	LD   R26,Y
00025d 81b9      	LDD  R27,Y+1
00025e 168a      	CP   R8,R26
00025f 069b      	CPC  R9,R27
000260 f41c      	BRGE _0x24
                 ; 0000 00B8 {
                 ; 0000 00B9 maxsample = magnitude;
                +
000261 8088     +LDD R8 , Y + 0
000262 8099     +LDD R9 , Y + 0 + 1
                 	__GETWRS 8,9,0
                 ; 0000 00BA maxindex = i;
000263 2eb1      	MOV  R11,R17
                 ; 0000 00BB 
                 ; 0000 00BC }
                 ; 0000 00BD }
                 _0x24:
000264 9622      	ADIW R28,2
000265 5f1f      	SUBI R17,-1
000266 cfd7      	RJMP _0x22
                 _0x23:
                 ; 0000 00BE if(maxindex > temp )
000267 150b      	CP   R16,R11
000268 f408      	BRSH _0x25
                 ; 0000 00BF temp= maxindex;       //      lcd_gotoxy(0, 1);lcd_printf("hi = %d",maxindex);de ...
000269 2d0b      	MOV  R16,R11
                 ; 0000 00C0 
                 ; 0000 00C1 // Calculate the heart rate in BPM
                 ; 0000 00C2 bpm =  temp * 60 / (N_WAVE / 2);
                 _0x25:
00026a e3ec      	LDI  R30,LOW(60)
00026b 9fe0      	MUL  R30,R16
00026c 01f0      	MOVW R30,R0
00026d 01df      	MOVW R26,R30
00026e e2e0      	LDI  R30,LOW(32)
00026f e0f0      	LDI  R31,HIGH(32)
000270 940e 04be 	CALL __DIVW21
000272 2e4e      	MOV  R4,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // Display the heart rate on the LCD
                 ; 0000 00C5 lcd_gotoxy(0, 0);
000273 e0e0      	LDI  R30,LOW(0)
000274 93ea      	ST   -Y,R30
000275 e0a0      	LDI  R26,LOW(0)
000276 d04b      	RCALL _lcd_gotoxy
                 ; 0000 00C6 lcd_puts("BPM: ");
                +
000277 e6a0     +LDI R26 , LOW ( _0x26 + ( 0 ) )
000278 e0b2     +LDI R27 , HIGH ( _0x26 + ( 0 ) )
                 	__POINTW2MN _0x26,0
000279 d07a      	RCALL _lcd_puts
                 ; 0000 00C7 lcd_putchar((bpm / 10) + '0');
00027a 2da4      	MOV  R26,R4
00027b e0b0      	LDI  R27,0
00027c e0ea      	LDI  R30,LOW(10)
00027d e0f0      	LDI  R31,HIGH(10)
00027e 940e 04be 	CALL __DIVW21
000280 5de0      	SUBI R30,-LOW(48)
000281 2fae      	MOV  R26,R30
000282 d05d      	RCALL _lcd_putchar
                 ; 0000 00C8 lcd_putchar((bpm % 10) + '0');
000283 2da4      	MOV  R26,R4
000284 27bb      	CLR  R27
000285 e0ea      	LDI  R30,LOW(10)
000286 e0f0      	LDI  R31,HIGH(10)
000287 940e 04c3 	CALL __MODW21
000289 5de0      	SUBI R30,-LOW(48)
00028a 2fae      	MOV  R26,R30
00028b d054      	RCALL _lcd_putchar
                 ; 0000 00C9 
                 ; 0000 00CA samplenumber = 0;
00028c 2466      	CLR  R6
                 ; 0000 00CB }
                 ; 0000 00CC 
                 ; 0000 00CD delay_ms(30); // Adjust the delay as needed
                 _0x1D:
00028d e1ae      	LDI  R26,LOW(30)
00028e e0b0      	LDI  R27,0
00028f 940e 06ab 	CALL _delay_ms
                 ; 0000 00CE }
000291 cf7b      	RJMP _0x1A
                 ; 0000 00CF }
                 _0x27:
000292 cfff      	RJMP _0x27
                 ; .FEND
                 
                 	.DSEG
                 _0x26:
000260           	.BYTE 0x6
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000293 931a      	ST   -Y,R17
000294 2f1a      	MOV  R17,R26
000295 ff14      	SBRS R17,4
000296 c002      	RJMP _0x2000004
000297 9a96      	SBI  0x12,6
000298 c001      	RJMP _0x2000005
                 _0x2000004:
000299 9896      	CBI  0x12,6
                 _0x2000005:
00029a ff15      	SBRS R17,5
00029b c002      	RJMP _0x2000006
00029c 9a95      	SBI  0x12,5
00029d c001      	RJMP _0x2000007
                 _0x2000006:
00029e 9895      	CBI  0x12,5
                 _0x2000007:
00029f ff16      	SBRS R17,6
0002a0 c002      	RJMP _0x2000008
0002a1 9a94      	SBI  0x12,4
0002a2 c001      	RJMP _0x2000009
                 _0x2000008:
0002a3 9894      	CBI  0x12,4
                 _0x2000009:
0002a4 ff17      	SBRS R17,7
0002a5 c002      	RJMP _0x200000A
0002a6 9a93      	SBI  0x12,3
0002a7 c001      	RJMP _0x200000B
                 _0x200000A:
0002a8 9893      	CBI  0x12,3
                 _0x200000B:
                +
0002a9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002aa 958a     +DEC R24
0002ab f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ac 9ac2      	SBI  0x18,2
                +
0002ad e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002ae 958a     +DEC R24
0002af f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b0 98c2      	CBI  0x18,2
                +
0002b1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b2 958a     +DEC R24
0002b3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b4 c07e      	RJMP _0x20E0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002b5 93aa      	ST   -Y,R26
0002b6 81a8      	LD   R26,Y
0002b7 dfdb      	RCALL __lcd_write_nibble_G100
0002b8 81e8          ld    r30,y
0002b9 95e2          swap  r30
0002ba 83e8          st    y,r30
0002bb 81a8      	LD   R26,Y
0002bc dfd6      	RCALL __lcd_write_nibble_G100
                +
0002bd e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002be 958a     +DEC R24
0002bf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002c0 9621      	ADIW R28,1
0002c1 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002c2 931a      	ST   -Y,R17
0002c3 930a      	ST   -Y,R16
0002c4 2f1a      	MOV  R17,R26
0002c5 810a      	LDD  R16,Y+2
0002c6 2fe1      	MOV  R30,R17
0002c7 e0f0      	LDI  R31,0
0002c8 5dea      	SUBI R30,LOW(-__base_y_G100)
0002c9 4ffb      	SBCI R31,HIGH(-__base_y_G100)
0002ca 81e0      	LD   R30,Z
0002cb 0fe0      	ADD  R30,R16
0002cc 2fae      	MOV  R26,R30
0002cd dfe7      	RCALL __lcd_write_data
0002ce 2ea0      	MOV  R10,R16
0002cf 2ed1      	MOV  R13,R17
0002d0 8119      	LDD  R17,Y+1
0002d1 8108      	LDD  R16,Y+0
0002d2 9623      	ADIW R28,3
0002d3 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002d4 e0a2      	LDI  R26,LOW(2)
0002d5 940e 043d 	CALL SUBOPT_0x9
0002d7 e0ac      	LDI  R26,LOW(12)
0002d8 dfdc      	RCALL __lcd_write_data
0002d9 e0a1      	LDI  R26,LOW(1)
0002da 940e 043d 	CALL SUBOPT_0x9
0002dc e0e0      	LDI  R30,LOW(0)
0002dd 2ede      	MOV  R13,R30
0002de 2eae      	MOV  R10,R30
0002df 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002e0 931a      	ST   -Y,R17
0002e1 2f1a      	MOV  R17,R26
0002e2 301a      	CPI  R17,10
0002e3 f011      	BREQ _0x2000011
0002e4 14ac      	CP   R10,R12
0002e5 f040      	BRLO _0x2000010
                 _0x2000011:
0002e6 e0e0      	LDI  R30,LOW(0)
0002e7 93ea      	ST   -Y,R30
0002e8 94d3      	INC  R13
0002e9 2dad      	MOV  R26,R13
0002ea dfd7      	RCALL _lcd_gotoxy
0002eb 301a      	CPI  R17,10
0002ec f409      	BRNE _0x2000013
0002ed c045      	RJMP _0x20E0002
                 _0x2000013:
                 _0x2000010:
0002ee 94a3      	INC  R10
0002ef 9ac0      	SBI  0x18,0
0002f0 2fa1      	MOV  R26,R17
0002f1 dfc3      	RCALL __lcd_write_data
0002f2 98c0      	CBI  0x18,0
0002f3 c03f      	RJMP _0x20E0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002f4 940e 046a 	CALL __SAVELOCR4
0002f6 019d      	MOVW R18,R26
                 _0x2000014:
0002f7 01d9      	MOVW R26,R18
                +
0002f8 5f2f     +SUBI R18 , LOW ( - 1 )
0002f9 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002fa 91ec      	LD   R30,X
0002fb 2f1e      	MOV  R17,R30
0002fc 30e0      	CPI  R30,0
0002fd f019      	BREQ _0x2000016
0002fe 2fa1      	MOV  R26,R17
0002ff dfe0      	RCALL _lcd_putchar
000300 cff6      	RJMP _0x2000014
                 _0x2000016:
000301 940e 0471 	CALL __LOADLOCR4
000303 940c 037b 	JMP  _0x20E0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000305 931a      	ST   -Y,R17
000306 2f1a      	MOV  R17,R26
000307 9a8e      	SBI  0x11,6
000308 9a8d      	SBI  0x11,5
000309 9a8c      	SBI  0x11,4
00030a 9a8b      	SBI  0x11,3
00030b 9aba      	SBI  0x17,2
00030c 9ab8      	SBI  0x17,0
00030d 9ab9      	SBI  0x17,1
00030e 98c2      	CBI  0x18,2
00030f 98c0      	CBI  0x18,0
000310 98c1      	CBI  0x18,1
000311 2ec1      	MOV  R12,R17
000312 2fe1      	MOV  R30,R17
000313 58e0      	SUBI R30,-LOW(128)
                +
000314 93e0 0428+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000316 2fe1      	MOV  R30,R17
000317 54e0      	SUBI R30,-LOW(192)
                +
000318 93e0 0429+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00031a e1a4      	LDI  R26,LOW(20)
00031b e0b0      	LDI  R27,0
00031c 940e 06ab 	CALL _delay_ms
00031e 940e 0443 	CALL SUBOPT_0xA
000320 940e 0443 	CALL SUBOPT_0xA
000322 940e 0443 	CALL SUBOPT_0xA
000324 e2a0      	LDI  R26,LOW(32)
000325 df6d      	RCALL __lcd_write_nibble_G100
                +
000326 ec88     +LDI R24 , LOW ( 200 )
000327 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000328 9701     +SBIW R24 , 1
000329 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00032a e2a8      	LDI  R26,LOW(40)
00032b df89      	RCALL __lcd_write_data
00032c e0a4      	LDI  R26,LOW(4)
00032d df87      	RCALL __lcd_write_data
00032e e8a5      	LDI  R26,LOW(133)
00032f df85      	RCALL __lcd_write_data
000330 e0a6      	LDI  R26,LOW(6)
000331 df83      	RCALL __lcd_write_data
000332 dfa1      	RCALL _lcd_clear
                 _0x20E0002:
000333 9119      	LD   R17,Y+
000334 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000335 940e 04f2 	CALL __PUTPARD2
000337 817b         ldd  r23,y+3
000338 816a         ldd  r22,y+2
000339 81f9         ldd  r31,y+1
00033a 81e8         ld   r30,y
00033b fb77         bst  r23,7
00033c 0f77         lsl  r23
00033d fd67         sbrc r22,7
00033e 6071         sbr  r23,1
00033f 2f97         mov  r25,r23
000340 579e         subi r25,0x7e
000341 f081         breq __ftrunc0
000342 f078         brcs __ftrunc0
000343 3198         cpi  r25,24
000344 f490         brsh __ftrunc1
000345 27aa         clr  r26
000346 27bb         clr  r27
000347 2788         clr  r24
                 __ftrunc2:
000348 9408         sec
000349 9587         ror  r24
00034a 95b7         ror  r27
00034b 95a7         ror  r26
00034c 959a         dec  r25
00034d f7d1         brne __ftrunc2
00034e 23ea         and  r30,r26
00034f 23fb         and  r31,r27
000350 2368         and  r22,r24
000351 c005         rjmp __ftrunc1
                 __ftrunc0:
000352 94e8         clt
000353 2777         clr  r23
000354 27ee         clr  r30
000355 27ff         clr  r31
000356 2766         clr  r22
                 __ftrunc1:
000357 776f         cbr  r22,0x80
000358 9576         lsr  r23
000359 f408         brcc __ftrunc3
00035a 6860         sbr  r22,0x80
                 __ftrunc3:
00035b f977         bld  r23,7
00035c 91a9         ld   r26,y+
00035d 91b9         ld   r27,y+
00035e 9189         ld   r24,y+
00035f 9199         ld   r25,y+
000360 17ea         cp   r30,r26
000361 07fb         cpc  r31,r27
000362 0768         cpc  r22,r24
000363 0779         cpc  r23,r25
000364 fb97         bst  r25,7
000365 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000366 940e 04f2 	CALL __PUTPARD2
000368 940e 04e8 	CALL __GETD2S0
00036a 940e 0335 	CALL _ftrunc
00036c 940e 04ed 	CALL __PUTD1S0
00036e f419          brne __floor1
                 __floor0:
00036f 940e 04e3 	CALL __GETD1S0
000371 c009      	RJMP _0x20E0001
                 __floor1:
000372 f7e6          brtc __floor0
000373 940e 04e3 	CALL __GETD1S0
                +
000375 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000376 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000377 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000378 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000379 940e 05a3 	CALL __SUBF12
                 _0x20E0001:
00037b 9624      	ADIW R28,4
00037c 9508      	RET
                 ; .FEND
                 _sin:
                 ; .FSTART _sin
00037d 940e 04f2 	CALL __PUTPARD2
00037f 9724      	SBIW R28,4
000380 931a      	ST   -Y,R17
000381 e010      	LDI  R17,0
000382 940e 044b 	CALL SUBOPT_0xB
                +
000384 e8e3     +LDI R30 , LOW ( 0x3E22F983 )
000385 eff9     +LDI R31 , HIGH ( 0x3E22F983 )
000386 e262     +LDI R22 , BYTE3 ( 0x3E22F983 )
000387 e37e     +LDI R23 , BYTE4 ( 0x3E22F983 )
                 	__GETD1N 0x3E22F983
000388 940e 05f9 	CALL __MULF12
00038a 940e 0450 	CALL SUBOPT_0xC
00038c dfd9      	RCALL _floor
00038d 940e 044b 	CALL SUBOPT_0xB
00038f 940e 04f7 	CALL __SWAPD12
000391 940e 05a3 	CALL __SUBF12
000393 940e 0450 	CALL SUBOPT_0xC
                +
000395 e0e0     +LDI R30 , LOW ( 0x3F000000 )
000396 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
000397 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
000398 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
000399 940e 068b 	CALL __CMPF12
00039b f009      	BREQ PC+2
00039c f408      	BRCC PC+2
00039d c009      	RJMP _0x2060017
00039e 940e 0455 	CALL SUBOPT_0xD
                +
0003a0 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0003a1 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0003a2 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0003a3 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0003a4 940e 045a 	CALL SUBOPT_0xE
0003a6 e011      	LDI  R17,LOW(1)
                 _0x2060017:
0003a7 940e 044b 	CALL SUBOPT_0xB
                +
0003a9 e0e0     +LDI R30 , LOW ( 0x3E800000 )
0003aa e0f0     +LDI R31 , HIGH ( 0x3E800000 )
0003ab e860     +LDI R22 , BYTE3 ( 0x3E800000 )
0003ac e37e     +LDI R23 , BYTE4 ( 0x3E800000 )
                 	__GETD1N 0x3E800000
0003ad 940e 068b 	CALL __CMPF12
0003af f009      	BREQ PC+2
0003b0 f408      	BRCC PC+2
0003b1 c008      	RJMP _0x2060018
0003b2 940e 044b 	CALL SUBOPT_0xB
                +
0003b4 e0e0     +LDI R30 , LOW ( 0x3F000000 )
0003b5 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
0003b6 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0003b7 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0003b8 940e 045a 	CALL SUBOPT_0xE
                 _0x2060018:
0003ba 3010      	CPI  R17,0
0003bb f041      	BREQ _0x2060019
0003bc 940e 0455 	CALL SUBOPT_0xD
0003be 940e 0504 	CALL __ANEGF1
                +
0003c0 83ed     +STD Y + 5 , R30
0003c1 83fe     +STD Y + 5 + 1 , R31
0003c2 836f     +STD Y + 5 + 2 , R22
0003c3 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
                 _0x2060019:
0003c4 940e 0455 	CALL SUBOPT_0xD
0003c6 940e 044b 	CALL SUBOPT_0xB
0003c8 940e 05f9 	CALL __MULF12
                +
0003ca 83e9     +STD Y + 1 , R30
0003cb 83fa     +STD Y + 1 + 1 , R31
0003cc 836b     +STD Y + 1 + 2 , R22
0003cd 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                +
0003ce eba1     +LDI R26 , LOW ( 0x4226C4B1 )
0003cf ecb4     +LDI R27 , HIGH ( 0x4226C4B1 )
0003d0 e286     +LDI R24 , BYTE3 ( 0x4226C4B1 )
0003d1 e492     +LDI R25 , BYTE4 ( 0x4226C4B1 )
                 	__GETD2N 0x4226C4B1
0003d2 940e 05f9 	CALL __MULF12
0003d4 01df      	MOVW R26,R30
0003d5 01cb      	MOVW R24,R22
                +
0003d6 e1ed     +LDI R30 , LOW ( 0x422DE51D )
0003d7 eef5     +LDI R31 , HIGH ( 0x422DE51D )
0003d8 e26d     +LDI R22 , BYTE3 ( 0x422DE51D )
0003d9 e472     +LDI R23 , BYTE4 ( 0x422DE51D )
                 	__GETD1N 0x422DE51D
0003da 940e 04f7 	CALL __SWAPD12
0003dc 940e 05a3 	CALL __SUBF12
0003de 940e 0461 	CALL SUBOPT_0xF
                +
0003e0 e4ac     +LDI R26 , LOW ( 0x4104534C )
0003e1 e5b3     +LDI R27 , HIGH ( 0x4104534C )
0003e2 e084     +LDI R24 , BYTE3 ( 0x4104534C )
0003e3 e491     +LDI R25 , BYTE4 ( 0x4104534C )
                 	__GETD2N 0x4104534C
0003e4 940e 05aa 	CALL __ADDF12
0003e6 940e 044b 	CALL SUBOPT_0xB
0003e8 940e 05f9 	CALL __MULF12
0003ea 937f      	PUSH R23
0003eb 936f      	PUSH R22
0003ec 93ff      	PUSH R31
0003ed 93ef      	PUSH R30
                +
0003ee 81e9     +LDD R30 , Y + 1
0003ef 81fa     +LDD R31 , Y + 1 + 1
0003f0 816b     +LDD R22 , Y + 1 + 2
0003f1 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                +
0003f2 e1a1     +LDI R26 , LOW ( 0x3FDEED11 )
0003f3 eebd     +LDI R27 , HIGH ( 0x3FDEED11 )
0003f4 ed8e     +LDI R24 , BYTE3 ( 0x3FDEED11 )
0003f5 e39f     +LDI R25 , BYTE4 ( 0x3FDEED11 )
                 	__GETD2N 0x3FDEED11
0003f6 940e 05aa 	CALL __ADDF12
0003f8 940e 0461 	CALL SUBOPT_0xF
                +
0003fa e5ae     +LDI R26 , LOW ( 0x3FA87B5E )
0003fb e7bb     +LDI R27 , HIGH ( 0x3FA87B5E )
0003fc ea88     +LDI R24 , BYTE3 ( 0x3FA87B5E )
0003fd e39f     +LDI R25 , BYTE4 ( 0x3FA87B5E )
                 	__GETD2N 0x3FA87B5E
0003fe 940e 05aa 	CALL __ADDF12
000400 91af      	POP  R26
000401 91bf      	POP  R27
000402 918f      	POP  R24
000403 919f      	POP  R25
000404 940e 0647 	CALL __DIVF21
000406 8118      	LDD  R17,Y+0
000407 9629      	ADIW R28,9
000408 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _Sinewave:
000266           	.BYTE 0x80
                 _heartsamples:
0002e6           	.BYTE 0x40
                 _zeros:
000326           	.BYTE 0x80
                 _heartsamplescopy:
0003a6           	.BYTE 0x80
                 __base_y_G100:
000426           	.BYTE 0x4
                 __seed_G102:
00042a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
000409 0fee      	LSL  R30
00040a 1fff      	ROL  R31
00040b 0fea      	ADD  R30,R26
00040c 1ffb      	ADC  R31,R27
00040d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1:
00040e a1a8      	LDD  R26,Y+32
00040f a1b9      	LDD  R27,Y+32+1
000410 0fee      	LSL  R30
000411 1fff      	ROL  R31
000412 0fae      	ADD  R26,R30
000413 1fbf      	ADC  R27,R31
000414 91ed      	LD   R30,X+
000415 91fd      	LD   R31,X+
000416 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000417 a1a8      	LDD  R26,Y+32
000418 a1b9      	LDD  R27,Y+32+1
000419 cfef      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3:
00041a 8dae      	LDD  R26,Y+30
00041b 8dbf      	LDD  R27,Y+30+1
00041c 0fee      	LSL  R30
00041d 1fff      	ROL  R31
00041e 0fae      	ADD  R26,R30
00041f 1fbf      	ADC  R27,R31
000420 91ed      	LD   R30,X+
000421 91fd      	LD   R31,X+
000422 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000423 8dae      	LDD  R26,Y+30
000424 8dbf      	LDD  R27,Y+30+1
000425 cfe3      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000426 0fee      	LSL  R30
000427 1fff      	ROL  R31
000428 0fae      	ADD  R26,R30
000429 1fbf      	ADC  R27,R31
00042a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00042b 85a8      	LDD  R26,Y+8
00042c 85b9      	LDD  R27,Y+8+1
00042d 940e 04a6 	CALL __MULW12
00042f 01bf      	MOVW R22,R30
000430 8dea      	LDD  R30,Y+26
000431 8dfb      	LDD  R31,Y+26+1
000432 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000433 2fe1      	MOV  R30,R17
000434 e2a6      	LDI  R26,LOW(_zeros)
000435 e0b3      	LDI  R27,HIGH(_zeros)
000436 e0f0      	LDI  R31,0
000437 cfee      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
000438 2fe1      	MOV  R30,R17
000439 eaa6      	LDI  R26,LOW(_heartsamplescopy)
00043a e0b3      	LDI  R27,HIGH(_heartsamplescopy)
00043b e0f0      	LDI  R31,0
00043c cfe9      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00043d 940e 02b5 	CALL __lcd_write_data
00043f e0a3      	LDI  R26,LOW(3)
000440 e0b0      	LDI  R27,0
000441 940c 06ab 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
000443 e3a0      	LDI  R26,LOW(48)
000444 940e 0293 	CALL __lcd_write_nibble_G100
                +
000446 ec88     +LDI R24 , LOW ( 200 )
000447 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000448 9701     +SBIW R24 , 1
000449 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00044a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xB:
                +
00044b 81ad     +LDD R26 , Y + 5
00044c 81be     +LDD R27 , Y + 5 + 1
00044d 818f     +LDD R24 , Y + 5 + 2
00044e 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
00044f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
000450 83ed     +STD Y + 5 , R30
000451 83fe     +STD Y + 5 + 1 , R31
000452 836f     +STD Y + 5 + 2 , R22
000453 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
000454 cff6      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
                +
000455 81ed     +LDD R30 , Y + 5
000456 81fe     +LDD R31 , Y + 5 + 1
000457 816f     +LDD R22 , Y + 5 + 2
000458 8578     +LDD R23 , Y + 5 + 3
                 	__GETD1S 5
000459 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00045a 940e 05a3 	CALL __SUBF12
                +
00045c 83ed     +STD Y + 5 , R30
00045d 83fe     +STD Y + 5 + 1 , R31
00045e 836f     +STD Y + 5 + 2 , R22
00045f 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
000460 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
000461 81a9     +LDD R26 , Y + 1
000462 81ba     +LDD R27 , Y + 1 + 1
000463 818b     +LDD R24 , Y + 1 + 2
000464 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000465 940e 05f9 	CALL __MULF12
000467 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000468 935a      	ST   -Y,R21
                 __SAVELOCR5:
000469 934a      	ST   -Y,R20
                 __SAVELOCR4:
00046a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00046b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00046c 931a      	ST   -Y,R17
00046d 930a      	ST   -Y,R16
00046e 9508      	RET
                 
                 __LOADLOCR6:
00046f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000470 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000471 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000472 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000473 8119      	LDD  R17,Y+1
000474 8108      	LD   R16,Y
000475 9508      	RET
                 
                 __ANEGW1:
000476 95f1      	NEG  R31
000477 95e1      	NEG  R30
000478 40f0      	SBCI R31,0
000479 9508      	RET
                 
                 __ANEGD1:
00047a 95f0      	COM  R31
00047b 9560      	COM  R22
00047c 9570      	COM  R23
00047d 95e1      	NEG  R30
00047e 4fff      	SBCI R31,-1
00047f 4f6f      	SBCI R22,-1
000480 4f7f      	SBCI R23,-1
000481 9508      	RET
                 
                 __LSLW12:
000482 23ee      	TST  R30
000483 2e0e      	MOV  R0,R30
000484 e0e8      	LDI  R30,8
000485 2e1e      	MOV  R1,R30
000486 01fd      	MOVW R30,R26
000487 f051      	BREQ __LSLW12R
                 __LSLW12S8:
000488 1401      	CP   R0,R1
000489 f020      	BRLO __LSLW12L
00048a 2ffe      	MOV  R31,R30
00048b e0e0      	LDI  R30,0
00048c 1801      	SUB  R0,R1
00048d f021      	BREQ __LSLW12R
                 __LSLW12L:
00048e 0fee      	LSL  R30
00048f 1fff      	ROL  R31
000490 940a      	DEC  R0
000491 f7e1      	BRNE __LSLW12L
                 __LSLW12R:
000492 9508      	RET
                 
                 __ASRW8:
000493 2fef      	MOV  R30,R31
000494 27ff      	CLR  R31
000495 fde7      	SBRC R30,7
000496 efff      	SER  R31
000497 9508      	RET
                 
                 __CBD1:
000498 2ffe      	MOV  R31,R30
000499 0fff      	ADD  R31,R31
00049a 0bff      	SBC  R31,R31
00049b 2f6f      	MOV  R22,R31
00049c 2f7f      	MOV  R23,R31
00049d 9508      	RET
                 
                 __MULW12U:
00049e 9ffa      	MUL  R31,R26
00049f 2df0      	MOV  R31,R0
0004a0 9feb      	MUL  R30,R27
0004a1 0df0      	ADD  R31,R0
0004a2 9fea      	MUL  R30,R26
0004a3 2de0      	MOV  R30,R0
0004a4 0df1      	ADD  R31,R1
0004a5 9508      	RET
                 
                 __MULW12:
0004a6 d02a      	RCALL __CHKSIGNW
0004a7 dff6      	RCALL __MULW12U
0004a8 f40e      	BRTC __MULW121
0004a9 dfcc      	RCALL __ANEGW1
                 __MULW121:
0004aa 9508      	RET
                 
                 __DIVW21U:
0004ab 2400      	CLR  R0
0004ac 2411      	CLR  R1
0004ad e190      	LDI  R25,16
                 __DIVW21U1:
0004ae 0faa      	LSL  R26
0004af 1fbb      	ROL  R27
0004b0 1c00      	ROL  R0
0004b1 1c11      	ROL  R1
0004b2 1a0e      	SUB  R0,R30
0004b3 0a1f      	SBC  R1,R31
0004b4 f418      	BRCC __DIVW21U2
0004b5 0e0e      	ADD  R0,R30
0004b6 1e1f      	ADC  R1,R31
0004b7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004b8 60a1      	SBR  R26,1
                 __DIVW21U3:
0004b9 959a      	DEC  R25
0004ba f799      	BRNE __DIVW21U1
0004bb 01fd      	MOVW R30,R26
0004bc 01d0      	MOVW R26,R0
0004bd 9508      	RET
                 
                 __DIVW21:
0004be d012      	RCALL __CHKSIGNW
0004bf dfeb      	RCALL __DIVW21U
0004c0 f40e      	BRTC __DIVW211
0004c1 dfb4      	RCALL __ANEGW1
                 __DIVW211:
0004c2 9508      	RET
                 
                 __MODW21:
0004c3 94e8      	CLT
0004c4 ffb7      	SBRS R27,7
0004c5 c004      	RJMP __MODW211
0004c6 95b1      	NEG  R27
0004c7 95a1      	NEG  R26
0004c8 40b0      	SBCI R27,0
0004c9 9468      	SET
                 __MODW211:
0004ca fdf7      	SBRC R31,7
0004cb dfaa      	RCALL __ANEGW1
0004cc dfde      	RCALL __DIVW21U
0004cd 01fd      	MOVW R30,R26
0004ce f40e      	BRTC __MODW212
0004cf dfa6      	RCALL __ANEGW1
                 __MODW212:
0004d0 9508      	RET
                 
                 __CHKSIGNW:
0004d1 94e8      	CLT
0004d2 fff7      	SBRS R31,7
0004d3 c002      	RJMP __CHKSW1
0004d4 dfa1      	RCALL __ANEGW1
0004d5 9468      	SET
                 __CHKSW1:
0004d6 ffb7      	SBRS R27,7
0004d7 c006      	RJMP __CHKSW2
0004d8 95b1      	NEG  R27
0004d9 95a1      	NEG  R26
0004da 40b0      	SBCI R27,0
0004db f800      	BLD  R0,0
0004dc 9403      	INC  R0
0004dd fa00      	BST  R0,0
                 __CHKSW2:
0004de 9508      	RET
                 
                 __GETW1P:
0004df 91ed      	LD   R30,X+
0004e0 91fc      	LD   R31,X
0004e1 9711      	SBIW R26,1
0004e2 9508      	RET
                 
                 __GETD1S0:
0004e3 81e8      	LD   R30,Y
0004e4 81f9      	LDD  R31,Y+1
0004e5 816a      	LDD  R22,Y+2
0004e6 817b      	LDD  R23,Y+3
0004e7 9508      	RET
                 
                 __GETD2S0:
0004e8 81a8      	LD   R26,Y
0004e9 81b9      	LDD  R27,Y+1
0004ea 818a      	LDD  R24,Y+2
0004eb 819b      	LDD  R25,Y+3
0004ec 9508      	RET
                 
                 __PUTD1S0:
0004ed 83e8      	ST   Y,R30
0004ee 83f9      	STD  Y+1,R31
0004ef 836a      	STD  Y+2,R22
0004f0 837b      	STD  Y+3,R23
0004f1 9508      	RET
                 
                 __PUTPARD2:
0004f2 939a      	ST   -Y,R25
0004f3 938a      	ST   -Y,R24
0004f4 93ba      	ST   -Y,R27
0004f5 93aa      	ST   -Y,R26
0004f6 9508      	RET
                 
                 __SWAPD12:
0004f7 2e18      	MOV  R1,R24
0004f8 2f86      	MOV  R24,R22
0004f9 2d61      	MOV  R22,R1
0004fa 2e19      	MOV  R1,R25
0004fb 2f97      	MOV  R25,R23
0004fc 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0004fd 2e1b      	MOV  R1,R27
0004fe 2fbf      	MOV  R27,R31
0004ff 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000500 2e1a      	MOV  R1,R26
000501 2fae      	MOV  R26,R30
000502 2de1      	MOV  R30,R1
000503 9508      	RET
                 
                 __ANEGF1:
000504 9730      	SBIW R30,0
000505 4060      	SBCI R22,0
000506 4070      	SBCI R23,0
000507 f009      	BREQ __ANEGF10
000508 5870      	SUBI R23,0x80
                 __ANEGF10:
000509 9508      	RET
                 
                 __ROUND_REPACK:
00050a 2355      	TST  R21
00050b f442      	BRPL __REPACK
00050c 3850      	CPI  R21,0x80
00050d f411      	BRNE __ROUND_REPACK0
00050e ffe0      	SBRS R30,0
00050f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000510 9631      	ADIW R30,1
000511 1f69      	ADC  R22,R25
000512 1f79      	ADC  R23,R25
000513 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000514 e850      	LDI  R21,0x80
000515 2757      	EOR  R21,R23
000516 f411      	BRNE __REPACK0
000517 935f      	PUSH R21
000518 c0cf      	RJMP __ZERORES
                 __REPACK0:
000519 3f5f      	CPI  R21,0xFF
00051a f031      	BREQ __REPACK1
00051b 0f66      	LSL  R22
00051c 0c00      	LSL  R0
00051d 9557      	ROR  R21
00051e 9567      	ROR  R22
00051f 2f75      	MOV  R23,R21
000520 9508      	RET
                 __REPACK1:
000521 935f      	PUSH R21
000522 2000      	TST  R0
000523 f00a      	BRMI __REPACK2
000524 c0ce      	RJMP __MAXRES
                 __REPACK2:
000525 c0c7      	RJMP __MINRES
                 
                 __UNPACK:
000526 e850      	LDI  R21,0x80
000527 2e19      	MOV  R1,R25
000528 2215      	AND  R1,R21
000529 0f88      	LSL  R24
00052a 1f99      	ROL  R25
00052b 2795      	EOR  R25,R21
00052c 0f55      	LSL  R21
00052d 9587      	ROR  R24
                 
                 __UNPACK1:
00052e e850      	LDI  R21,0x80
00052f 2e07      	MOV  R0,R23
000530 2205      	AND  R0,R21
000531 0f66      	LSL  R22
000532 1f77      	ROL  R23
000533 2775      	EOR  R23,R21
000534 0f55      	LSL  R21
000535 9567      	ROR  R22
000536 9508      	RET
                 
                 __CFD1U:
000537 9468      	SET
000538 c001      	RJMP __CFD1U0
                 __CFD1:
000539 94e8      	CLT
                 __CFD1U0:
00053a 935f      	PUSH R21
00053b dff2      	RCALL __UNPACK1
00053c 3870      	CPI  R23,0x80
00053d f018      	BRLO __CFD10
00053e 3f7f      	CPI  R23,0xFF
00053f f408      	BRCC __CFD10
000540 c0a7      	RJMP __ZERORES
                 __CFD10:
000541 e156      	LDI  R21,22
000542 1b57      	SUB  R21,R23
000543 f4aa      	BRPL __CFD11
000544 9551      	NEG  R21
000545 3058      	CPI  R21,8
000546 f40e      	BRTC __CFD19
000547 3059      	CPI  R21,9
                 __CFD19:
000548 f030      	BRLO __CFD17
000549 efef      	SER  R30
00054a efff      	SER  R31
00054b ef6f      	SER  R22
00054c e77f      	LDI  R23,0x7F
00054d f977      	BLD  R23,7
00054e c01a      	RJMP __CFD15
                 __CFD17:
00054f 2777      	CLR  R23
000550 2355      	TST  R21
000551 f0b9      	BREQ __CFD15
                 __CFD18:
000552 0fee      	LSL  R30
000553 1fff      	ROL  R31
000554 1f66      	ROL  R22
000555 1f77      	ROL  R23
000556 955a      	DEC  R21
000557 f7d1      	BRNE __CFD18
000558 c010      	RJMP __CFD15
                 __CFD11:
000559 2777      	CLR  R23
                 __CFD12:
00055a 3058      	CPI  R21,8
00055b f028      	BRLO __CFD13
00055c 2fef      	MOV  R30,R31
00055d 2ff6      	MOV  R31,R22
00055e 2f67      	MOV  R22,R23
00055f 5058      	SUBI R21,8
000560 cff9      	RJMP __CFD12
                 __CFD13:
000561 2355      	TST  R21
000562 f031      	BREQ __CFD15
                 __CFD14:
000563 9576      	LSR  R23
000564 9567      	ROR  R22
000565 95f7      	ROR  R31
000566 95e7      	ROR  R30
000567 955a      	DEC  R21
000568 f7d1      	BRNE __CFD14
                 __CFD15:
000569 2000      	TST  R0
00056a f40a      	BRPL __CFD16
00056b df0e      	RCALL __ANEGD1
                 __CFD16:
00056c 915f      	POP  R21
00056d 9508      	RET
                 
                 __CDF1U:
00056e 9468      	SET
00056f c001      	RJMP __CDF1U0
                 __CDF1:
000570 94e8      	CLT
                 __CDF1U0:
000571 9730      	SBIW R30,0
000572 4060      	SBCI R22,0
000573 4070      	SBCI R23,0
000574 f0b1      	BREQ __CDF10
000575 2400      	CLR  R0
000576 f026      	BRTS __CDF11
000577 2377      	TST  R23
000578 f412      	BRPL __CDF11
000579 9400      	COM  R0
00057a deff      	RCALL __ANEGD1
                 __CDF11:
00057b 2e17      	MOV  R1,R23
00057c e17e      	LDI  R23,30
00057d 2011      	TST  R1
                 __CDF12:
00057e f032      	BRMI __CDF13
00057f 957a      	DEC  R23
000580 0fee      	LSL  R30
000581 1fff      	ROL  R31
000582 1f66      	ROL  R22
000583 1c11      	ROL  R1
000584 cff9      	RJMP __CDF12
                 __CDF13:
000585 2fef      	MOV  R30,R31
000586 2ff6      	MOV  R31,R22
000587 2d61      	MOV  R22,R1
000588 935f      	PUSH R21
000589 df8a      	RCALL __REPACK
00058a 915f      	POP  R21
                 __CDF10:
00058b 9508      	RET
                 
                 __SWAPACC:
00058c 934f      	PUSH R20
00058d 01af      	MOVW R20,R30
00058e 01fd      	MOVW R30,R26
00058f 01da      	MOVW R26,R20
000590 01ab      	MOVW R20,R22
000591 01bc      	MOVW R22,R24
000592 01ca      	MOVW R24,R20
000593 2d40      	MOV  R20,R0
000594 2c01      	MOV  R0,R1
000595 2e14      	MOV  R1,R20
000596 914f      	POP  R20
000597 9508      	RET
                 
                 __UADD12:
000598 0fea      	ADD  R30,R26
000599 1ffb      	ADC  R31,R27
00059a 1f68      	ADC  R22,R24
00059b 9508      	RET
                 
                 __NEGMAN1:
00059c 95e0      	COM  R30
00059d 95f0      	COM  R31
00059e 9560      	COM  R22
00059f 5fef      	SUBI R30,-1
0005a0 4fff      	SBCI R31,-1
0005a1 4f6f      	SBCI R22,-1
0005a2 9508      	RET
                 
                 __SUBF12:
0005a3 935f      	PUSH R21
0005a4 df81      	RCALL __UNPACK
0005a5 3890      	CPI  R25,0x80
0005a6 f171      	BREQ __ADDF129
0005a7 e850      	LDI  R21,0x80
0005a8 2615      	EOR  R1,R21
                 
0005a9 c004      	RJMP __ADDF120
                 
                 __ADDF12:
0005aa 935f      	PUSH R21
0005ab df7a      	RCALL __UNPACK
0005ac 3890      	CPI  R25,0x80
0005ad f139      	BREQ __ADDF129
                 
                 __ADDF120:
0005ae 3870      	CPI  R23,0x80
0005af f121      	BREQ __ADDF128
                 __ADDF121:
0005b0 2f57      	MOV  R21,R23
0005b1 1b59      	SUB  R21,R25
0005b2 f12b      	BRVS __ADDF1211
0005b3 f412      	BRPL __ADDF122
0005b4 dfd7      	RCALL __SWAPACC
0005b5 cffa      	RJMP __ADDF121
                 __ADDF122:
0005b6 3158      	CPI  R21,24
0005b7 f018      	BRLO __ADDF123
0005b8 27aa      	CLR  R26
0005b9 27bb      	CLR  R27
0005ba 2788      	CLR  R24
                 __ADDF123:
0005bb 3058      	CPI  R21,8
0005bc f028      	BRLO __ADDF124
0005bd 2fab      	MOV  R26,R27
0005be 2fb8      	MOV  R27,R24
0005bf 2788      	CLR  R24
0005c0 5058      	SUBI R21,8
0005c1 cff9      	RJMP __ADDF123
                 __ADDF124:
0005c2 2355      	TST  R21
0005c3 f029      	BREQ __ADDF126
                 __ADDF125:
0005c4 9586      	LSR  R24
0005c5 95b7      	ROR  R27
0005c6 95a7      	ROR  R26
0005c7 955a      	DEC  R21
0005c8 f7d9      	BRNE __ADDF125
                 __ADDF126:
0005c9 2d50      	MOV  R21,R0
0005ca 2551      	EOR  R21,R1
0005cb f072      	BRMI __ADDF127
0005cc dfcb      	RCALL __UADD12
0005cd f438      	BRCC __ADDF129
0005ce 9567      	ROR  R22
0005cf 95f7      	ROR  R31
0005d0 95e7      	ROR  R30
0005d1 9573      	INC  R23
0005d2 f413      	BRVC __ADDF129
0005d3 c01f      	RJMP __MAXRES
                 __ADDF128:
0005d4 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0005d5 df3e      	RCALL __REPACK
0005d6 915f      	POP  R21
0005d7 9508      	RET
                 __ADDF1211:
0005d8 f7d8      	BRCC __ADDF128
0005d9 cffb      	RJMP __ADDF129
                 __ADDF127:
0005da 1bea      	SUB  R30,R26
0005db 0bfb      	SBC  R31,R27
0005dc 0b68      	SBC  R22,R24
0005dd f051      	BREQ __ZERORES
0005de f410      	BRCC __ADDF1210
0005df 9400      	COM  R0
0005e0 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0005e1 2366      	TST  R22
0005e2 f392      	BRMI __ADDF129
0005e3 0fee      	LSL  R30
0005e4 1fff      	ROL  R31
0005e5 1f66      	ROL  R22
0005e6 957a      	DEC  R23
0005e7 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0005e8 27ee      	CLR  R30
0005e9 27ff      	CLR  R31
0005ea 01bf      	MOVW R22,R30
0005eb 915f      	POP  R21
0005ec 9508      	RET
                 
                 __MINRES:
0005ed efef      	SER  R30
0005ee efff      	SER  R31
0005ef e76f      	LDI  R22,0x7F
0005f0 ef7f      	SER  R23
0005f1 915f      	POP  R21
0005f2 9508      	RET
                 
                 __MAXRES:
0005f3 efef      	SER  R30
0005f4 efff      	SER  R31
0005f5 e76f      	LDI  R22,0x7F
0005f6 e77f      	LDI  R23,0x7F
0005f7 915f      	POP  R21
0005f8 9508      	RET
                 
                 __MULF12:
0005f9 935f      	PUSH R21
0005fa df2b      	RCALL __UNPACK
0005fb 3870      	CPI  R23,0x80
0005fc f359      	BREQ __ZERORES
0005fd 3890      	CPI  R25,0x80
0005fe f349      	BREQ __ZERORES
0005ff 2401      	EOR  R0,R1
000600 9408      	SEC
000601 1f79      	ADC  R23,R25
000602 f423      	BRVC __MULF124
000603 f324      	BRLT __ZERORES
                 __MULF125:
000604 2000      	TST  R0
000605 f33a      	BRMI __MINRES
000606 cfec      	RJMP __MAXRES
                 __MULF124:
000607 920f      	PUSH R0
000608 931f      	PUSH R17
000609 932f      	PUSH R18
00060a 933f      	PUSH R19
00060b 934f      	PUSH R20
00060c 2711      	CLR  R17
00060d 2722      	CLR  R18
00060e 2799      	CLR  R25
00060f 9f68      	MUL  R22,R24
000610 01a0      	MOVW R20,R0
000611 9f8f      	MUL  R24,R31
000612 2d30      	MOV  R19,R0
000613 0d41      	ADD  R20,R1
000614 1f59      	ADC  R21,R25
000615 9f6b      	MUL  R22,R27
000616 0d30      	ADD  R19,R0
000617 1d41      	ADC  R20,R1
000618 1f59      	ADC  R21,R25
000619 9f8e      	MUL  R24,R30
00061a d027      	RCALL __MULF126
00061b 9fbf      	MUL  R27,R31
00061c d025      	RCALL __MULF126
00061d 9f6a      	MUL  R22,R26
00061e d023      	RCALL __MULF126
00061f 9fbe      	MUL  R27,R30
000620 d01d      	RCALL __MULF127
000621 9faf      	MUL  R26,R31
000622 d01b      	RCALL __MULF127
000623 9fae      	MUL  R26,R30
000624 0d11      	ADD  R17,R1
000625 1f29      	ADC  R18,R25
000626 1f39      	ADC  R19,R25
000627 1f49      	ADC  R20,R25
000628 1f59      	ADC  R21,R25
000629 2fe3      	MOV  R30,R19
00062a 2ff4      	MOV  R31,R20
00062b 2f65      	MOV  R22,R21
00062c 2f52      	MOV  R21,R18
00062d 914f      	POP  R20
00062e 913f      	POP  R19
00062f 912f      	POP  R18
000630 911f      	POP  R17
000631 900f      	POP  R0
000632 2366      	TST  R22
000633 f02a      	BRMI __MULF122
000634 0f55      	LSL  R21
000635 1fee      	ROL  R30
000636 1fff      	ROL  R31
000637 1f66      	ROL  R22
000638 c002      	RJMP __MULF123
                 __MULF122:
000639 9573      	INC  R23
00063a f24b      	BRVS __MULF125
                 __MULF123:
00063b dece      	RCALL __ROUND_REPACK
00063c 915f      	POP  R21
00063d 9508      	RET
                 
                 __MULF127:
00063e 0d10      	ADD  R17,R0
00063f 1d21      	ADC  R18,R1
000640 1f39      	ADC  R19,R25
000641 c002      	RJMP __MULF128
                 __MULF126:
000642 0d20      	ADD  R18,R0
000643 1d31      	ADC  R19,R1
                 __MULF128:
000644 1f49      	ADC  R20,R25
000645 1f59      	ADC  R21,R25
000646 9508      	RET
                 
                 __DIVF21:
000647 935f      	PUSH R21
000648 dedd      	RCALL __UNPACK
000649 3870      	CPI  R23,0x80
00064a f421      	BRNE __DIVF210
00064b 2011      	TST  R1
                 __DIVF211:
00064c f40a      	BRPL __DIVF219
00064d cf9f      	RJMP __MINRES
                 __DIVF219:
00064e cfa4      	RJMP __MAXRES
                 __DIVF210:
00064f 3890      	CPI  R25,0x80
000650 f409      	BRNE __DIVF218
                 __DIVF217:
000651 cf96      	RJMP __ZERORES
                 __DIVF218:
000652 2401      	EOR  R0,R1
000653 9408      	SEC
000654 0b97      	SBC  R25,R23
000655 f41b      	BRVC __DIVF216
000656 f3d4      	BRLT __DIVF217
000657 2000      	TST  R0
000658 cff3      	RJMP __DIVF211
                 __DIVF216:
000659 2f79      	MOV  R23,R25
00065a 931f      	PUSH R17
00065b 932f      	PUSH R18
00065c 933f      	PUSH R19
00065d 934f      	PUSH R20
00065e 2411      	CLR  R1
00065f 2711      	CLR  R17
000660 2722      	CLR  R18
000661 2733      	CLR  R19
000662 01a9      	MOVW R20,R18
000663 e290      	LDI  R25,32
                 __DIVF212:
000664 17ae      	CP   R26,R30
000665 07bf      	CPC  R27,R31
000666 0786      	CPC  R24,R22
000667 0741      	CPC  R20,R17
000668 f030      	BRLO __DIVF213
000669 1bae      	SUB  R26,R30
00066a 0bbf      	SBC  R27,R31
00066b 0b86      	SBC  R24,R22
00066c 0b41      	SBC  R20,R17
00066d 9408      	SEC
00066e c001      	RJMP __DIVF214
                 __DIVF213:
00066f 9488      	CLC
                 __DIVF214:
000670 1f55      	ROL  R21
000671 1f22      	ROL  R18
000672 1f33      	ROL  R19
000673 1c11      	ROL  R1
000674 1faa      	ROL  R26
000675 1fbb      	ROL  R27
000676 1f88      	ROL  R24
000677 1f44      	ROL  R20
000678 959a      	DEC  R25
000679 f751      	BRNE __DIVF212
00067a 01f9      	MOVW R30,R18
00067b 2d61      	MOV  R22,R1
00067c 914f      	POP  R20
00067d 913f      	POP  R19
00067e 912f      	POP  R18
00067f 911f      	POP  R17
000680 2366      	TST  R22
000681 f032      	BRMI __DIVF215
000682 0f55      	LSL  R21
000683 1fee      	ROL  R30
000684 1fff      	ROL  R31
000685 1f66      	ROL  R22
000686 957a      	DEC  R23
000687 f24b      	BRVS __DIVF217
                 __DIVF215:
000688 de81      	RCALL __ROUND_REPACK
000689 915f      	POP  R21
00068a 9508      	RET
                 
                 __CMPF12:
00068b 2399      	TST  R25
00068c f09a      	BRMI __CMPF120
00068d 2377      	TST  R23
00068e f042      	BRMI __CMPF121
00068f 1797      	CP   R25,R23
000690 f048      	BRLO __CMPF122
000691 f429      	BRNE __CMPF121
000692 17ae      	CP   R26,R30
000693 07bf      	CPC  R27,R31
000694 0786      	CPC  R24,R22
000695 f020      	BRLO __CMPF122
000696 f031      	BREQ __CMPF123
                 __CMPF121:
000697 9498      	CLZ
000698 9488      	CLC
000699 9508      	RET
                 __CMPF122:
00069a 9498      	CLZ
00069b 9408      	SEC
00069c 9508      	RET
                 __CMPF123:
00069d 9418      	SEZ
00069e 9488      	CLC
00069f 9508      	RET
                 __CMPF120:
0006a0 2377      	TST  R23
0006a1 f7c2      	BRPL __CMPF122
0006a2 1797      	CP   R25,R23
0006a3 f398      	BRLO __CMPF121
0006a4 f7a9      	BRNE __CMPF122
0006a5 17ea      	CP   R30,R26
0006a6 07fb      	CPC  R31,R27
0006a7 0768      	CPC  R22,R24
0006a8 f388      	BRLO __CMPF122
0006a9 f399      	BREQ __CMPF123
0006aa cfec      	RJMP __CMPF121
                 
                 _delay_ms:
0006ab 9610      	adiw r26,0
0006ac f039      	breq __delay_ms1
                 __delay_ms0:
0006ad 95a8      	wdr
                +
0006ae ed80     +LDI R24 , LOW ( 0x7D0 )
0006af e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0006b0 9701     +SBIW R24 , 1
0006b1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0006b2 9711      	sbiw r26,1
0006b3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0006b4 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  58 r1 :  40 r2 :   0 r3 :   0 r4 :   3 r5 :   3 r6 :   5 r7 :   1 
r8 :   4 r9 :   4 r10:   4 r11:   5 r12:   2 r13:   4 r14:   0 r15:   0 
r16:  20 r17:  64 r18:  21 r19:  17 r20:  32 r21:  68 r22:  78 r23:  71 
r24:  64 r25:  57 r26: 150 r27:  99 r28:  10 r29:   1 r30: 282 r31: 194 
x  :  38 y  : 244 z  :  14 
Registers used: 31 out of 35 (88.6%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  23 
adiw  :  10 and   :   7 andi  :   0 asr   :   5 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   8 brcs  :   1 break :   0 breq  :  24 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   6 brmi  :   9 brne  :  27 brpl  :   7 brsh  :   6 brtc  :   5 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   3 call  : 103 
cbi   :   9 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  42 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  17 cpc   :  17 cpi   :  24 cpse  :   0 dec   :  16 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   6 jmp   :  26 ld    :  32 ldd   : 133 ldi   : 168 
lds   :   0 lpm   :   7 lsl   :  20 lsr   :   3 mov   :  79 movw  :  57 
mul   :  13 muls  :   0 mulsu :   0 neg   :   8 nop   :   0 or    :   0 
ori   :   1 out   :   9 pop   :  24 push  :  24 rcall :  51 ret   :  56 
reti  :   0 rjmp  :  66 rol   :  34 ror   :  20 sbc   :  11 sbci  :  17 
sbi   :  15 sbic  :   0 sbis  :   1 sbiw  :  16 sbr   :   3 sbrc  :   3 
sbrs  :   8 sec   :   5 seh   :   0 sei   :   0 sen   :   0 ser   :   9 
ses   :   0 set   :   4 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  52 std   :  72 sts   :   2 sub   :   9 subi  :  17 swap  :   1 
tst   :  18 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d6a   3376     58   3434   32768  10.5%
[.dseg] 0x000060 0x00042e      0    462    462    2048  22.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
