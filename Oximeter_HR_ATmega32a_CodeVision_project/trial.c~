#include <mega32a.h>

#include <delay.h>

// Alphanumeric LCD functions
#include <alcd.h>
#include <stdint.h>
#include <delay.h>
#include <alcd.h>
#include <io.h>
#include <pgmspace.h>
#include <interrupt.h>
#include <stdlib.h>
#include <math.h>
#include <delay.h>
#include <sleep.h>
#define N_WAVE 64     /* size of FFT */
#define LOG2_N_WAVE 6 /* log2(N_WAVE) */

int Sinewave[N_WAVE]; // a table of sines for the FFT


unsigned char currentvalue;
unsigned char bpm;
unsigned char timetosample;
unsigned char samplenumber;
char heartsamples[N_WAVE];
int zeros[N_WAVE];
int heartsamplescopy[N_WAVE];
int maxsample;
unsigned char maxindex;
//unsigned int heartaverage;

// fixed conversion macros
#define int2fix(a) (((int)(a)) << 8)
#define fix2int(a) ((signed char)((a) >> 8))
#define float2fix(a) ((int)((a)*256.0))
#define fix2float(a) (((float)(a)) / 256.0)

// Voltage Reference: AVCC pin
#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
	ADMUX = adc_input | ADC_VREF_TYPE;
	// Delay needed for the stabilization of the ADC input voltage
	delay_us(10);
	// Start the AD conversion
	ADCSRA |= (1 << ADSC);
	// Wait for the AD conversion to complete
	while ((ADCSRA & (1 << ADIF)) == 0);
	ADCSRA |= (1 << ADIF);
	return ADCW;
}
void initialize()
{   char i;
	// Alphanumeric LCD initialization
	// Connections are specified in the
	// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
	// RS - PORTB Bit 0
	// RD - PORTB Bit 1
	// EN - PORTB Bit 2
	// D4 - PORTD Bit 6
	// D5 - PORTD Bit 5
	// D6 - PORTD Bit 4
	// D7 - PORTD Bit 3
	// Characters/line: 16
    
    // Initialize LCD display
    lcd_init(16); 
    
    
     // ADC initialization
	// ADC Clock frequency: 125.000 kHz
	// ADC Voltage Reference: AVCC pin
	// ADC Auto Trigger Source: Free Running
	ADMUX = ADC_VREF_TYPE;
	ADCSRA = (1 << ADEN) | (0 << ADSC) | (1 << ADATE) | (0 << ADIF) | (0 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0);
	SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0); 
     
    // Initialize variables
    timetosample = 0;
    samplenumber = 0;
    maxsample = 0;
    maxindex = 0;
    currentvalue = 0;

    // Generate one cycle sine table required for FFT
    for ( i = 0; i < N_WAVE; i++)
        Sinewave[i] = float2fix(sin(6.283 * ((float)i) / N_WAVE));
}
void FFTfix(int fr[], int fi[], int m)
{
    int mr, nn, i, j, L, k, istep, n;
    int qr, qi, tr, ti, wr, wi;

    mr = 0;
    n = 1 << m; // number of points
    nn = n - 1;

    // Decimation in time - reorder data
    for (m = 1; m <= nn; ++m)
    {
        L = n;
        do
            L >>= 1;
        while (mr + L > nn);
        mr = (mr & (L - 1)) + L;
        if (mr <= m)
            continue;
        tr = fr[m];
        fr[m] = fr[mr];
        fr[mr] = tr;
        ti = fi[m];
        fi[m] = fi[mr];
        fi[mr] = ti;
    }

    L = 1;
    k = LOG2_N_WAVE - 1;
    while (L < n)
    {
        istep = L << 1;
        for (m = 0; m < L; ++m)
        {
            j = m << k;
            wr = Sinewave[j + N_WAVE / 4];
            wi = -Sinewave[j];
            wr >>= 1;
            wi >>= 1;

            for (i = m; i < n; i += istep)
            {
                j = i + L;
                tr = (wr * fr[j] - wi * fi[j]) >> 8;
                ti = (wr * fi[j] + wi * fr[j]) >> 8;
                qr = fr[i] >> 1;
                qi = fi[i] >> 1;
                fr[j] = qr - tr;
                fi[j] = qi - ti;
                fr[i] = qr + tr;
                fi[i] = qi + ti;
            }
        }
        --k;
        L = istep;
    }
}

void main(void)
{   char i;
    // Initialize variables and peripherals
    initialize();
   
//    while (1)
//          {
//             lcd_gotoxy(0, 0);lcd_printf("hi = %d",maxindex); 
//          }
    while (1)
    {             
                         
         
        // Read the ADC value
        currentvalue = read_adc(0);  
        // Store the value in the heart samples array
        heartsamples[samplenumber] = currentvalue;
        samplenumber++;

        if (samplenumber >= N_WAVE)
        {
            // Perform FFT on the heart samples
            for ( i = 0; i < N_WAVE; i++)
            {            
                zeros[i] = 0;
                heartsamplescopy[i] = int2fix(heartsamples[i]);
            }
            FFTfix(heartsamplescopy, zeros, LOG2_N_WAVE);
               
            // Find the maximum magnitude and its index
            maxsample = 0;
            maxindex = 0;
            for ( i = 0; i < N_WAVE / 2; i++)
            {
                int magnitude = heartsamplescopy[i] * heartsamplescopy[i] + zeros[i] * zeros[i];
                if (magnitude > maxsample)
                {
                    maxsample = magnitude;
                    maxindex = i;
                                         
                }
            }
                       //      lcd_gotoxy(0, 1);lcd_printf("hi = %d",maxindex);delay_ms(3000); 

            // Calculate the heart rate in BPM
            bpm =  maxindex * 60 / (N_WAVE / 2);

            // Display the heart rate on the LCD
            lcd_gotoxy(0, 0);
            lcd_puts("BPM: ");
            lcd_putchar((bpm / 10) + '0');
            lcd_putchar((bpm % 10) + '0');

            samplenumber = 0;
        }

        delay_ms(30); // Adjust the delay as needed
    }
}



//
//
//unsigned char calculateBPM()
//{   char i;
//    // Perform FFT on heart samples
//    int fr[N_WAVE];
//    int fi[N_WAVE];
//    
//    for ( i = 0; i < N_WAVE; i++)
//   {
//        fr[i] = heartsamples[i];
//        fi[i] = 0;
//    }                   
//    
//    FFTfix(fr, fi, LOG2_N_WAVE);
//
//    // Find the maximum amplitude and its index
//    maxsample = 0;
//    maxindex = 0;
//    for ( i = 1; i <= N_WAVE / 2; i++)
//    {
//        int sample = fr[i] * fr[i] + fi[i] * fi[i];
//        if (sample > maxsample)
//        {
//            maxsample = sample;
//            maxindex = i;
//        }
//    }
//
//    // Calculate BPM using the index of the maximum amplitude
//    bpm = round((float)maxindex * (60.0 / N_WAVE));
//
//    return bpm;
//}

//
//
//int round(float value)
//{
//    if (value >= 0)
//        return (int)(value + 0.5);
//    else
//        return (int)(value - 0.5);
//}
